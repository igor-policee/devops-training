---

stages:
  - deploy_staging
  - deploy_prod
  - revert

variables:
  BUILD_MOUNTPOINT: /var/lib/docker/volumes/build-volume/_data

deploy_staging:
  stage: deploy_staging
  tags:
    - linux
  variables:
    REPLACE_TEMPLATE: "<p style=\"font-size:30px; color: white;\"><em> BUILD # ${CI_PIPELINE_IID}</em></p>"
    ENV: staging
  before_script:
    - sed -i '30d' index.html && sed -i "30i${REPLACE_TEMPLATE}" index.html
  script:
    - sudo mkdir ${BUILD_MOUNTPOINT}/build-${CI_PIPELINE_IID}
    - sudo cp --recursive * ${BUILD_MOUNTPOINT}/build-${CI_PIPELINE_IID}/
    - sudo sh -c "cd ${BUILD_MOUNTPOINT} && ln --symbolic --no-dereference --force build-${CI_PIPELINE_IID} html-${ENV}"
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

deploy_prod:
  stage: deploy_prod
  tags:
    - linux
  variables:
    ENV: prod
  script:
    - sudo sh -c "cd ${BUILD_MOUNTPOINT} && ln --symbolic --no-dereference --force build-${CI_PIPELINE_IID} html-${ENV}"
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

revert_prev_build:
  stage: revert
  tags:
    - linux
  variables:
    ENV: prod
  before_script:
    - export PREV_BUILD_NUMBER=$((${CI_PIPELINE_IID}-1))
  script:
    - sudo sh -c "cd ${BUILD_MOUNTPOINT} && ln --symbolic --no-dereference --force build-${PREV_BUILD_NUMBER} html-${ENV}"
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

cleanup_old_builds:
  stage: .pre
  tags:
    - linux
  before_script:
    - chmod +x .cleanup.sh
  script:
    - sudo ./.cleanup.sh ${CI_PIPELINE_IID}
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'